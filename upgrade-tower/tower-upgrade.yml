# Playbook to upgrade Ansible Tower to 3.2.x
# e.g. ansible-playbook -i tower.example.com, tower-upgrade.yml -v
# (create first tower-upgrade_vars.local.yml from tower-upgrade_vars.example.yml)

---
- name: "Upgrade Tower to {{ tower_upgrade_version }}"
  hosts: all
  become: true
  gather_facts: false
  vars_files:
    - tower-upgrade_vars.local.yml
  tasks:
    - name: set tower_bundle_dir variable to where to find the extracted bundle
      set_fact:
        tower_bundle_dir: "{{ temp_dir }}/{{ tower_bundle_name }}"

    # ==== Unpack new-version bundle ==== #

    - name: "Extract the Tower bundle version {{ tower_upgrade_version }}"
      unarchive:
        remote_src: "{{ tower_bundle_remote }}"
        src: "{{ tower_bundle_remote | ternary(tower_bundle_remote_archive, tower_bundle_local_archive) }}"
        dest: "{{ temp_dir }}"
      tags: takelongtime

    - name: upgrade ansible and tower-cli
      yum:
        name:
        - ansible
        - python2-ansible-tower-cli
        state: latest
        update_cache: yes

    # ==== Make changes to the inventory ==== #

    - name: "Configure passwords in file {{ tower_bundle_dir }}/inventory"
      lineinfile:
        name: "{{ tower_bundle_dir }}/inventory"
        regexp: "^{{ item.key }}="
        line: "{{ item.key }}='{{ item.value }}'"
        state: present
      loop: "{{ tower_upgrade_passwords | dict2items }}"
      no_log: true

    # necessary in the customer's environment because var is small and we install on symlinks
    - name: "Configure minimum_var_space in file {{ tower_bundle_dir }}/inventory"
      lineinfile:
        name: "{{ tower_bundle_dir }}/inventory"
        insertafter: "\\[all:vars\\]"
        line: "minimum_var_space=0"
        state: present

    # ==== Execute upgrade script provided by the Tower-bundle ==== #
    # ==== and restart Ansible Tower:                          ==== #

    - name: "Backup Tower into '{{ tower_backup_dir | default('nowhere') }}'"
      command: ./setup.sh -b -e 'backup_dest={{ tower_backup_dir }}' -e 'backup_dir=/var/tmp/tower'
      args:
        chdir: "{{ tower_bundle_dir }}"
      when: tower_backup_dir is defined

    - name: "Run setup.sh on Tower"
      command: ./setup.sh
      args:
        chdir: "{{ tower_bundle_dir }}"
      notify: restart tower

  handlers:
    - name: restart tower
      command: ansible-tower-service restart
